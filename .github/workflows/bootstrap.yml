name: Bootstrap ManusVA
on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Clean repository but keep .git/.github
        shell: bash
        run: |
          shopt -s extglob dotglob
          rm -rf -- !(.git|.github)
          mkdir -p .github/workflows src

      - name: Write project files
        run: |
          cat > package.json <<'JSON'
          {
            "name": "manusva",
            "private": true,
            "type": "module",
            "version": "3.1.0",
            "scripts": {
              "start": "node src/server.mjs",
              "agent": "node manos-agent.mjs"
            },
            "dependencies": {
              "express": "^4.19.2",
              "cors": "^2.8.5",
              "morgan": "^1.10.0",
              "ws": "^8.17.1",
              "node-fetch": "^3.3.2"
            }
          }
          JSON

          cat > .env.example <<'ENV'
          SUPABASE_URL=
          SUPABASE_ANON_KEY=
          SUPABASE_SERVICE_ROLE_KEY=
          OPENAI_API_KEY=
          MANOS_API_URL=https://api.manus.in/v1
          MANOS_API_KEY=
          VA_SERVER_URL=
          VA_SIGNING_SECRET=
          SENTRY_DSN=
          NODE_ENV=production
          PORT=8080
          ENV

          cat > src/server.mjs <<'JS'
          import express from 'express';
          import cors from 'cors';
          import morgan from 'morgan';
          import { WebSocketServer } from 'ws';

          const app = express();
          app.use(cors());
          app.use(express.json({limit:'2mb'}));
          app.use(morgan('tiny'));
          app.get('/health', (_,res)=>res.json({ok:true, ts: Date.now()}));

          app.post('/va/start-session', (req,res)=> {
            const { userId, deviceId, meta } = req.body||{};
            res.json({ sessionId: cryptoRandom(), userId, deviceId, meta: meta||{} });
          });
          app.post('/va/append-transcript', (req,res)=> {
            const { sessionId, content, language } = req.body||{};
            res.json({ ok:true, sessionId, content, language: language||'ar' });
          });
          app.post('/va/end-session', (req,res)=> {
            const { sessionId } = req.body||{};
            res.json({ ok:true, sessionId, closed: true });
          });

          const server = app.listen(process.env.PORT||8080, ()=>{
            console.log('VA server on', server.address().port);
          });

          const wss = new WebSocketServer({ server, path: '/va/realtime' });
          wss.on('connection', ws => {
            ws.on('message', msg => ws.send(JSON.stringify({ echo: msg.toString() })));
            ws.send(JSON.stringify({ hello: 'realtime ok' }));
          });

          function cryptoRandom(){
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c=>{
              const r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
              return v.toString(16);
            });
          }
          JS

          cat > manos-agent.mjs <<'JS'
          import fetch from 'node-fetch';
          const API = process.env.MANOS_API_URL || 'https://api.manus.in/v1';
          const AUTH = process.env.MANOS_API_KEY ? { Authorization: `Bearer ${process.env.MANOS_API_KEY}` } : {};
          console.log('Manos Agent started. API:', API);
          async function run(){
            try{
              const r = await fetch(API + '/ops/poll', { headers: AUTH });
              console.log('poll status', r.status);
            }catch(e){ console.log('poll error', e.message); }
          }
          setInterval(run, 5000);
          JS

          cat > .github/workflows/run_agent.yml <<'YML'
          name: Manos Agent â€” Pull & Execute Ops
          on: { workflow_dispatch: {} }
          jobs:
            run_agent:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-node@v4
                  with: { node-version: '20' }
                - run: npm i
                - run: node manos-agent.mjs
                  env:
                    MANOS_API_URL: ${{ secrets.MANOS_API_URL }}
                    MANOS_API_KEY: ${{ secrets.MANOS_API_KEY }}
          YML

      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "bootstrap: ManusVA v3.1"
